from Book import Book
from Patron import Patron
from Transaction import Transaction
import datetime

class Library:
    def __init__(self):
        self.books = []
        self.patrons = []
        self.transactions = []

    def add_book(self, title, author, isbn, quantity):
        """Method to add a new book to the library."""
        book = Book(title, author, isbn, quantity)
        self.books.append(book)
        print(f"Book '{title}' added to the library inventory.")

    def remove_book(self, isbn):
        """Method to remove a book from the library."""
        for book in self.books:
            if book.isbn == isbn:
                self.books.remove(book)
                print(f"Book '{book.title}' removed from the library inventory.")
                return
        print("Book is not in tthe library.")

    def add_patron(self, name, id, contact_info):
        """Method to add a new patron to the library."""
        patron = Patron(name, id, contact_info)
        self.patrons.append(patron)
        print(f"Patron '{name}' added to the library system.")

    def remove_patron(self, id):
        """Method to remove a patron from the library."""
        for patron in self.patrons:
            if patron.id == id:
                self.patrons.remove(patron)
                print(f"Patron '{patron.name}' removed from the library system.")
                return
        print("Patron is not in the Library System")

    def search_books(self, keyword):
        """Method to search for books in the library by title or author."""
        results = []
        for book in self.books:
            if keyword.lower() in book.title.lower() or keyword.lower() in book.author.lower():
                results.append(book)
        if results:
            print("Search Results:")
            for book in results:
                print(f"Title: {book.title}, Author: {book.author}, ISBN: {book.isbn}, Quantity: {book.quantity}")
        else:
            print("No books found matching the search criteria.")

    def handle_transaction(self, isbn, patron_id, check_out=True):
        """Method to handle book checkout or return."""
        book = None
        patron = None
        for b in self.books:
            if b.isbn == isbn:
                book = b
                break
        for p in self.patrons:
            if p.id == patron_id:
                patron = p
                break
        if book is None:
            print("Book is not in the Library")
            return
        if patron is None:
            print("Error: Patron is not in the library system.")
            return
        if check_out:
            if book.quantity > 0:
                transaction = Transaction(book, patron)
                transaction.check_out_book()
                self.transactions.append(transaction)
            else:
                print("This book is out of stock.")
        else:
            for transaction in self.transactions:
                if transaction.book == book and transaction.patron == patron:
                    transaction.check_in_book()
                    self.transactions.remove(transaction)
                    return
            print("No active transaction found for this book and patron.")

    def generate_reports(self):
        """Method to generate reports."""
        print("Library Inventory:")
        for book in self.books:
            print(f"Title: {book.title}, Author: {book.author}, ISBN: {book.isbn}, Quantity: {book.quantity}")

# Example
library = Library()


library.add_book("Harry Potter and the Sorcerer's Stone", "J.K. Rowling", "9780439362139", 17)
library.add_book("The Alchemist", "Paulo Coelho", " 9780008283643", 5)

library.add_patron("Charles Brown", "AB799", "charlesb@gmail.com")


library.search_books("Harry Potter")


library.handle_transaction("9780439362139", "AB799", check_out=True)


library.generate_reports()
